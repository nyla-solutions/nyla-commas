<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="nyla.solutions.global.patterns.command.commas.CommasServiceFactoryTest" tests="2" skipped="0" failures="2" errors="0" timestamp="2019-04-29T19:20:51" hostname="MacBook-Pro-5.local" time="0.191">
  <properties/>
  <testcase name="testCreateClass" classname="nyla.solutions.global.patterns.command.commas.CommasServiceFactoryTest" time="0.183">
    <failure message="nyla.solutions.core.exception.SystemException: Advice:RmiAllRoutesAdvice not found in in keyset:[]" type="nyla.solutions.core.exception.SystemException">nyla.solutions.core.exception.SystemException: Advice:RmiAllRoutesAdvice not found in in keyset:[]
	at nyla.solutions.commas.CommasServiceFactory.constructObject(CommasServiceFactory.java:544)
	at nyla.solutions.commas.CommasServiceFactory.initCommand(CommasServiceFactory.java:383)
	at nyla.solutions.commas.CommasServiceFactory.init(CommasServiceFactory.java:288)
	at nyla.solutions.commas.CommasServiceFactory.init(CommasServiceFactory.java:228)
	at nyla.solutions.commas.CommasServiceFactory.&lt;init&gt;(CommasServiceFactory.java:67)
	at nyla.solutions.commas.CommasServiceFactory.getCommasServiceFactory(CommasServiceFactory.java:76)
	at nyla.solutions.global.patterns.command.commas.CommasServiceFactoryTest.testCreateClass(CommasServiceFactoryTest.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
  </testcase>
  <testcase name="testJson" classname="nyla.solutions.global.patterns.command.commas.CommasServiceFactoryTest" time="0.008">
    <failure message="nyla.solutions.core.exception.SystemException: Advice:RmiAllRoutesAdvice not found in in keyset:[]" type="nyla.solutions.core.exception.SystemException">nyla.solutions.core.exception.SystemException: Advice:RmiAllRoutesAdvice not found in in keyset:[]
	at nyla.solutions.commas.CommasServiceFactory.constructObject(CommasServiceFactory.java:544)
	at nyla.solutions.commas.CommasServiceFactory.initCommand(CommasServiceFactory.java:383)
	at nyla.solutions.commas.CommasServiceFactory.init(CommasServiceFactory.java:288)
	at nyla.solutions.commas.CommasServiceFactory.init(CommasServiceFactory.java:228)
	at nyla.solutions.commas.CommasServiceFactory.&lt;init&gt;(CommasServiceFactory.java:67)
	at nyla.solutions.commas.CommasServiceFactory.getCommasServiceFactory(CommasServiceFactory.java:76)
	at nyla.solutions.global.patterns.command.commas.CommasServiceFactoryTest.testJson(CommasServiceFactoryTest.java:68)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.base/java.lang.Thread.run(Thread.java:834)
</failure>
  </testcase>
  <system-out><![CDATA[DEBUG: Loading packages [nyla.solutions.global.patterns.command.commas]
DEBUG: loading method:findUsersEveryWhere
DEBUG: constructObject(functionFacts:CommandFacts [simpleName=findUsersEveryWhere, commandAttributes=null, notes=, parameterTypeLengthCount=0, argumentClassInfo=CatalogClassInfo [classType=generic, classSchema=ClassSchema [className=nyla.solutions.core.data.Criteria, classType=generic, methodSchemas=[MethodSchema [name=equals, inputArguments=[ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.lang.Object]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=boolean]], MethodSchema [name=hashCode, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=clone, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Object]], MethodSchema [name=compareTo, inputArguments=[ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.lang.Object]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=getKey, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Object]], MethodSchema [name=getId, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=java.lang.String]], MethodSchema [name=copy, inputArguments=[ComplexTypeSchema [fieldClass=interface nyla.solutions.core.data.Copier, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=nyla.solutions.core.data.Copier]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=getPrimaryKey, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=setPrimaryKey, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=int]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=setPrimaryKeyInteger, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.Integer]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=resetNew, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=setId, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.String]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=toString, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=java.lang.String]], MethodSchema [name=isNull, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.String]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=boolean]], MethodSchema [name=sortByCriteria, inputArguments=[ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.util.Collection]], returnClassSchema=ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.util.Collection]], MethodSchema [name=sortByUpdateDate, inputArguments=[ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.util.Collection]], returnClassSchema=ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.util.Collection]], MethodSchema [name=wait, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=long]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=wait, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=long], PrimitiveTypeSchema [ fieldName=arg1, className=int]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=wait, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=getClass, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Class, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Class]], MethodSchema [name=notify, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=notifyAll, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]]], fieldSchemas=[PrimitiveTypeSchema [ fieldName=primaryKey, className=int], PrimitiveTypeSchema [ fieldName=id, className=java.lang.String]], enumConstants=null], arrayComponentTypeClassName=null, genericTypeClassNames=[nyla.solutions.core.data.Criteria]], returnClassInfo=CatalogClassInfo [classType=generic, classSchema=ClassSchema [className=java.util.Collection, classType=generic, methodSchemas=null, fieldSchemas=null, enumConstants=null], arrayComponentTypeClassName=null, genericTypeClassNames=[nyla.solutions.core.security.user.data.User]], commasName=, inputName=INPUT, outputName=OUTPUT, shortDescription=null, commandName=nyla.solutions.global.demo.commas.RealSingleRouteCommand.findUsersEveryWhere, regionName=, poolName=client, transactionType=WRITE, gridFunctionName=controller])
DEBUG: wrapping into commas proxy class:nyla.solutions.global.demo.commas.RealSingleRouteCommand
DEBUG: Loading packages [nyla.solutions.global.patterns.command.commas]
DEBUG: loading method:findUsersEveryWhere
DEBUG: constructObject(functionFacts:CommandFacts [simpleName=findUsersEveryWhere, commandAttributes=null, notes=, parameterTypeLengthCount=0, argumentClassInfo=CatalogClassInfo [classType=generic, classSchema=ClassSchema [className=nyla.solutions.core.data.Criteria, classType=generic, methodSchemas=[MethodSchema [name=equals, inputArguments=[ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.lang.Object]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=boolean]], MethodSchema [name=hashCode, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=clone, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Object]], MethodSchema [name=compareTo, inputArguments=[ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.lang.Object]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=getKey, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Object, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Object]], MethodSchema [name=getId, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=java.lang.String]], MethodSchema [name=copy, inputArguments=[ComplexTypeSchema [fieldClass=interface nyla.solutions.core.data.Copier, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=nyla.solutions.core.data.Copier]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=getPrimaryKey, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=int]], MethodSchema [name=setPrimaryKey, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=int]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=setPrimaryKeyInteger, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.Integer]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=resetNew, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=setId, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.String]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=toString, inputArguments=[], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=java.lang.String]], MethodSchema [name=isNull, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=java.lang.String]], returnClassSchema=PrimitiveTypeSchema [ fieldName=null, className=boolean]], MethodSchema [name=sortByCriteria, inputArguments=[ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.util.Collection]], returnClassSchema=ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.util.Collection]], MethodSchema [name=sortByUpdateDate, inputArguments=[ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=arg0, className=java.util.Collection]], returnClassSchema=ComplexTypeSchema [fieldClass=interface java.util.Collection, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.util.Collection]], MethodSchema [name=wait, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=long]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=wait, inputArguments=[PrimitiveTypeSchema [ fieldName=arg0, className=long], PrimitiveTypeSchema [ fieldName=arg1, className=int]], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=wait, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=getClass, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=class java.lang.Class, classType=generic, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=java.lang.Class]], MethodSchema [name=notify, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]], MethodSchema [name=notifyAll, inputArguments=[], returnClassSchema=ComplexTypeSchema [fieldClass=void, classType=object, primitiveFieldSchemas=[], complexFieldSchemas=[], fieldName=null, className=void]]], fieldSchemas=[PrimitiveTypeSchema [ fieldName=primaryKey, className=int], PrimitiveTypeSchema [ fieldName=id, className=java.lang.String]], enumConstants=null], arrayComponentTypeClassName=null, genericTypeClassNames=[nyla.solutions.core.data.Criteria]], returnClassInfo=CatalogClassInfo [classType=generic, classSchema=ClassSchema [className=java.util.Collection, classType=generic, methodSchemas=null, fieldSchemas=null, enumConstants=null], arrayComponentTypeClassName=null, genericTypeClassNames=[nyla.solutions.core.security.user.data.User]], commasName=, inputName=INPUT, outputName=OUTPUT, shortDescription=null, commandName=nyla.solutions.global.demo.commas.RealSingleRouteCommand.findUsersEveryWhere, regionName=, poolName=client, transactionType=WRITE, gridFunctionName=controller])
DEBUG: wrapping into commas proxy class:nyla.solutions.global.demo.commas.RealSingleRouteCommand
]]></system-out>
  <system-err><![CDATA[SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
]]></system-err>
</testsuite>
